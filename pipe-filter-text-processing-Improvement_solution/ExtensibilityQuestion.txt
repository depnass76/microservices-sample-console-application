Extensibility: Explain how your solution would support the following extensibility goal: The customer
wishes to redesign the system to handle text files written in languages other than English (each file is
one language). The design time modification must take less than one day. The ultimate solution must
be configurable automatically at runtime. At internationalized language source code. 
The hardcoded English messages have been removed. The language code is specified at the runtime. 
the same executable can be distributed worldwide, there is no recompilation for localization. 
they are steps process through internationalizing program. 


1.create the properties files which stores information about the characteristic of program or environment called plain-text format created by any text editor.
For example, French translator has propriety file MessagesBundle_fr_FR. properties, which contains these lines:greetings = Bonjour, farewell = Au revoir
inquiry = Comment allez-vous? name of properiety file is important it contains the FR country code.

2.define the local object of particular language and country
aLocale = new Locale("en","US"); for example Locale object for the french language in canada and frence is caLocale = new Locale("fr","CA"); frLocale = new Locale("fr","FR"); 
The program is flexible. Instead of using hardcoded language and country codes, the program gets them from the command line at run time:
String language = new String(args[0]);
String country = new String(args[1]);
currentLocale = new Locale(language, country);

3. Create a ResourceBundle ResourceBundle objects contain locale-specific objects. You use ResourceBundle objects to isolate locale-sensitive data, such as translatable text. In the sample program the ResourceBundle is backed by the properties files that contain the message text we want to display.
The ResourceBundle is created as follows: messages = ResourceBundle.getBundle("MessagesBundle", currentLocale); The arguments passed to the getBundle method identify which properties file will be accessed. The first argument, MessagesBundle, refers to this family of properties files:
MessagesBundle_en_US.properties
MessagesBundle_fr_FR.properties
MessagesBundle_de_DE.properties
The Locale, which is the second argument of getBundle, specifies which of the MessagesBundle files is chosen. When the Locale was created, the language code and the country code were passed to its constructor. Note that the language and country codes follow MessagesBundle in the names of the properties files.
Now all you have to do is get the translated messages from the ResourceBundle.

4. Fetch the Text from the ResourceBundle
The properties files contain key-value pairs. The values consist of the translated text that the program will display. You specify the keys when fetching the translated messages from the ResourceBundle with the getString method. For example, to retrieve the message identified by the greetings key, you invoke getString as follows:
String msg1 = messages.getString("greetings");
The sample program uses the key greetings because it reflects the content of the message, but it could have used another String, such as s1 or msg1. Just remember that the key is hardcoded in the program and it must be present in the properties files. If your translators accidentally modify the keys in the properties files, getString won't be able to find the messages.






